
# rsync

# 1st sync /original folder/ /target  folder/
rsync -raz /home/oem/00/ /home/oem/Dropbox/rsyncPC/00/

#2 Update remaining and delete those not in the source folder
# rsync -a --delete /home/oem/Min2/Cwwl/ /home/oem/Dropbox/rsyncPC/CWWL/   
# rsync -a --delete /home/d/Work/MyNotes/ spiridon@172.232.207.99:/home/spiridon/MyNotes



# GRAB THE ENTIRE WEBSITE:

$ wget \
     --recursive \
     --no-clobber \
     --page-requisites \
     --html-extension \
     --convert-links \
     --restrict-file-names=windows \
     --domains website.org \
     --no-parent \
        https://www.regular-expressions.info/completelines.html
         
#         The options are:
#    --recursive: download the entire Web site.
#    --domains website.org: don't follow links outside website.org.
#    --no-parent: don't follow links outside the directory tutorials/html/.
#    --page-requisites: get all the elements that compose the page (images, CSS and so on).
#    --html-extension: save files with the .html extension.
#    --convert-links: convert links so that they work locally, off-line.
#    --restrict-file-names=windows: modify filenames so that they will work in Windows as well.
#    --no-clobber: don't overwrite any existing files (used in case the download is interrupted and resumed).


=================================================
	#MAKE Books FROM VOLUMES /
	#make Chapters from Books

# split volume into books based on the 1st word inserted designator: 
awk '/designator/{line="book"++i;}{print > line;}' volumefile 

# rename a bookfile with the name of the first line: 
awk 'FNR==1 {file=$0} {print > (file".txt")}' bookfiles*

# delete the designator from all .txt files:
sed -i 's/designator//' *.txt

#Repeat the process for chapters from books.
==================================================
	# Minimize folder Ubuntu
gsettings set org.gnome.shell.extensions.dash-to-dock click-action 'minimize'

==================================================

	# Install MS fonts etc
sudo apt install ubuntu-restricted-extras
==================================================

	#install plugins
sudo apt install chrome-gnome-shell

==================================================

	#install auto-cpufreq
0. download
https://github.com/AdnanHodzic/auto-cpufreq
https://www.youtube.com/watch?v=QkYRpVEEIlg

1. stop / mask daemon power utility:
systemctl status power-profiles-daemon.service
systemctl mask power-profiles-daemon.service

2. install on /auto-cpufreq/scripts/ ..install.sh: 
sudo auto-cpufreq --install


==================================================

	# picture slideshow
  gsettings get org.yorba.shotwell.preferences.slideshow delay
  gsettings set org.yorba.shotwell.preferences.slideshow delay 1
  
  gsettings set org.yorba.shotwell.preferences.slideshow show-title true
  gsettings get org.yorba.shotwell.preferences.slideshow show-title
  
  gsettings get org.yorba.shotwell.preferences.slideshow transition-delay
  gsettings set org.yorba.shotwell.preferences.slideshow transition-delay 0.1

===================================================

	# setup git: use PAT

1. Make sure you have Personal Access Token for git authentication - PAT
{{{    Log in to GitHub:
        Go to GitHub and log in to your account.

    Access Settings:
        Click on your profile picture in the upper right corner.
        Select Settings from the dropdown menu.

    Navigate to Developer Settings:
        In the left sidebar, scroll down and click on Developer settings.

    Personal Access Tokens:
        Click on Personal access tokens in the left sidebar.
        Then click on Tokens (classic).

    Generate New Token:
        Click on the Generate new token button.

    Configure Token Settings:
        Note: You may need to confirm your password.
        Give your token a descriptive name in the Note field.
        Set an expiration for the token (e.g., 30 days, 60 days, etc.).
        Select the scopes or permissions you want to grant this token. For example:
            repo for full control of private repositories.
            workflow for updating GitHub Actions workflows.
            admin:org for managing organization settings.

    Generate Token:
        Click the Generate token button at the bottom of the page.

    Copy Your Token:
        Important: Copy the generated token immediately and store it securely. You wonâ€™t be able to see it again.
}}}
2. git remote -v
3. remote ULR setup to HTTPS: git remote set-url origin https://github.com/username/repository.git
4. Now you can use PAT instead of password.
---
1. git add .
2. git commit -m "update for today"
3. git push
4. git status

	# setup git: use SSH
01. Setup Git Credential Manager: git config --global credential.helper manager-core
02. generate SSH key pair: ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
03. eval "$(ssh-agent -s)"
04. ssh-add ~/.ssh/id_rsa
05. copy key: cat ~/.ssh/id_rsa.pub
06. go to: https://github.com/settings/keys
07. paste your public key  + give it a title
08. check current remote url: git remote -v
09. change git to use SSH instead of HTTPS: git remote set-url origin git@github.com:username/repository.git
10. test your ssh conection: ssh -T git@github.com
11. everything is correct if: Hi username! You've successfully authenticated, but GitHub does not provide shell access.
---
1. git add .
2. git commit -m "update for today"
3. git push origin main
4. git status
